a.	Summing up Even Number series 
Algorithm:
1.	Initialize the variables sum and n to 0.
2.	Use a loop to iterate through even numbers from 2 to n.
3.	Add each even number to the sum variable.
4.	Display the final value of sum as the sum of the even number series.
#!/bin/bash
Shell program : 
sum=0
n=10
for ((i=2; i<=n; i+=2))
do
    sum=$((sum + i))
done
echo "Sum of even numbers up to $n is: $sum"

output : 
Sum of even numbers up to 10 is: 30






b.	Summing up Odd Number series
Algorithm :
1.	Initialize the variables sum and n to 0.
2.	Use a loop to iterate through odd numbers from 1 to n.
3.	Add each odd number to the sum variable.
4.	Display the final value of sum as the sum of the odd number series.
#!/bin/bash
sum=0
n=10
for ((i=1; i<=n; i+=2))
do
    sum=$((sum + i))
done
echo "Sum of odd numbers up to $n is: $sum"
output : 
Sum of odd numbers up to 10 is: 25





c.	Finding given number is Armstrong or not 
Algorithm:
1.	Read the input number num.
2.	Initialize the variables sum and temp to 0.
3.	Store the value of num in temp for later comparison.
4.	Use a loop to calculate the sum of the cubes of each digit in num.
5.	Check if the sum is equal to num.
6.	If the condition is true, num is an Armstrong number. Otherwise, it is not.
Shell program : 
#!/bin/bash
read -p "Enter a number: " num
temp=$num
sum=0
while [ $temp -gt 0 ]
do
    digit=$((temp % 10))
    sum=$((sum + digit * digit * digit))
    temp=$((temp / 10))
done
if [ $sum -eq $num ]
then
    echo "$num is an Armstrong number."
else
    echo "$num is not an Armstrong number."
fi
Ouput : 
Enter a number: 153
153 is an Armstrong number.






d.	Summing up any n numbers and finding average
Algorithm:
1.	Read the value of n (the number of elements).
2.	Initialize the variables sum and num to 0.
3.	Use a loop to read n numbers and add them to sum.
4.	Calculate the average by dividing sum by n.
5.	Display the values of sum and average.
#!/bin/bash
read -p "Enter the number of elements: " n
sum=0
for ((i=1; i<=n; i++))
do
    read -p "Enter number $i: " num
    sum=$((sum + num))
done
average=$(bc -l <<< "scale=2; $sum / $n")
echo "Sum of the numbers is: $sum"
echo "Average of the numbers is: $average
Output : 





e.	Finding whether the given integer is odd or even 
Algorithm:
1.	Read an integer from the user.
2.	If the integer modulo 2 is 0, then it is even.
3.	Otherwise, it is odd.
4.	Print the result.
#!/bin/bash
echo "Enter an integer: "
read num
if (( num % 2 == 0 )); then
    echo "$num is even."
else
    echo "$num is odd."
Fi
Output ;
Enter an integer: 7
7 is odd.

f.	Finding the given integer is positive or negative 
Algorithm:
1.	Read an integer from the user.
2.	If the integer is greater than 0, then it is positive.
3.	If the integer is less than 0, then it is negative.
4.	Otherwise, it is zero.
5.	Print the result.
#!/bin/bash
echo "Enter an integer: "
read num
if (( num > 0 )); then
    echo "$num is positive."
elif (( num < 0 )); then
    echo "$num is negative."
else
    echo "$num is zero."
Fi
Output ;
Enter an integer: -5
-5 is negative.





g.	Swapping two numbers with a temporary variable 

Algorithm:
1.	Read two numbers from the user: num1 and num2.
2.	Create a temporary variable temp and set it equal to num1.
3.	Set num1 equal to num2.
4.	Set num2 equal to temp.
5.	Print the swapped values of num1 and num2.
Program : 
#!/bin/bash
echo "Enter two numbers: "
read num1 num2
temp=$num1
num1=$num2
num2=$temp
echo "Swapped numbers: $num1 and $num2"
output : 
Enter two numbers: 4 7
Swapped numbers: 7 and 4






h.	Swapping two numbers without a temporary variable
Algorithm:
1.	Read two numbers from the user: num1 and num2.
2.	Set num1 equal to the sum of num1 and num2.
3.	Set num2 equal to the difference between num1 and num2.
4.	Set num1 equal to the difference between num1 and num2.
5.	Print the swapped values of num1 and num2.
Program :
#!/bin/bash
echo "Enter two numbers: "
read num1 num2
num1=$((num1 + num2))
num2=$((num1 - num2))
num1=$((num1 - num2))
echo "Swapped numbers: $num1 and $num2"
output :
Enter two numbers: 6 9
Swapped numbers: 9 and 6
i.	Finding the biggest out of 2 integer numbers 
Algorithm:
1.	Read two numbers from the user: num1 and num2.
2.	If num1 is greater than num2, then num1 is the biggest.
3.	Otherwise, num2 is the biggest.
4.	Print the biggest number.
Program :
#!/bin/bash
echo "Enter two numbers: "
read num1 num2
if (( num1 > num2 )); then
    echo "$num1 is the biggest."
else
    echo "$num2 is the biggest."
Fi
Output ;
Enter two numbers: 8 3
8 is the biggest.
``





j.	Finding the biggest out of n integers
Algorithm:
1.	Read the value of n (the number of integers) from the user.
2.	Initialize a variable "largest" to store the largest number, and set it to the first number.
3.	For i = 2 to n, repeat steps 4-5.
4.	Read the next number from the user.
5.	If the current number is greater than the "largest" value, update "largest" with the current number.
6.	Print the value of "largest".
Shell program:
#!/bin/bash

echo "Enter the number of integers: "
read n
echo "Enter $n integers: "
read first_num
largest=$first_num
for (( i=2; i<=n; i++ ))
do
    read num
        if (( num > largest )); then
        largest=$num
    fi
done
echo "The largest number is: $largest"

output ;
Enter the number of integers: 5
Enter 5 integers:
10
5
7
13
2
The largest number is: 13
